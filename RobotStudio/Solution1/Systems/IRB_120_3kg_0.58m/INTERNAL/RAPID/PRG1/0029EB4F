MODULE Module1
    !***********************************************************
    !
    ! Módulo:  Module1
    !
    ! Descripción:
    !   <Introduzca la descripción aquí>
    !
    ! Autor: Antonio
    !
    ! Versión: 1.0
    !
    !***********************************************************
    
    VAR socketdev my_socket;
    VAR rawbytes data;
    VAR rawbytes raw_data;
    VAR byte nuevo:=0;
    VAR num n;
    VAR string n2;
    VAR num estad:=0;
    VAR byte data_buffer;
    VAR bool ok:=true;
    VAR bool okposx:=true;
    VAR bool okposy:=true;
    VAR bool okack:=true;
    VAR num i:=1;
    VAR rawbytes receive_string;
    VAR string string1;
    VAR string posx;
    VAR string posy;
    VAR string ack;
    VAR num posxint;
    VAR num posyint;
    VAR num xpos;
    VAR num ypos;
    VAR num len;
    !***********************************************************
    !
    ! Procedimiento Main
    !
    !   Este es el punto de entrada de su programa
    !
    !***********************************************************
    PROC main()
        !Añada aquí su código
        SocketClose my_socket;
        abricomunicacion;
        WaitTime 1;
        
        !WHILE ok=TRUE DO
        
            SocketSend my_socket,\Str:="STATUS"; !escribe en la red y lo envia a arduino (donde será leido)
            WaitTime 0.1; !espera un tiempo
                
            ClearRawBytes receive_string;
            SocketReceive my_socket \RawData := receive_string,\Time:=WAIT_MAX;
            
            UnpackRawBytes receive_string, 1, string1 \ASCII:=16; !7 es el espacio en caracteres que forman el número
            
            len := StrLen(string1);
            
            xpos := StrFind(string1, 1, "=");
            ypos := StrFind(string1, xpos+1, "=");
            posx := StrPart(string1, xpos+1, ypos-xpos-3);
            posy := StrPart(string1, ypos+1, len - ypos);
            !UnpackRawBytes receive_string, 5, posx \ASCII:=8;
            ClearRawBytes receive_string;
            !UnpackRawBytes receive_string3, 1, posy_str \ASCII:=8;
            !UnpackRawBytes receive_string, 8, n2 \ASCII:=8;
            okposx:=StrToVal(posx,posxint);
            okposy:=StrToVal(posy,posyint);
            !ok:=TRUE;
        !ok:=StrToVal(n2,float2);
        !ENDWHILE
        !TPWrite "Instruction SocketClose has been executed";
        

        !UnpackRawBytes data,1,nuevo,\ASCII:=15;
        !UnpackRawBytes data,2,nuevo,\ASCII:=1;
        !UnpackRawBytes data,3,nuevo1,\ASCII:=1;
        !UnpackRawBytes data,4,nuevo2,\ASCII:=1;

        SocketClose my_socket; !cierra el socket
        WaitTime 0.5;
        ok:=TRUE;
    ENDPROC
    
    PROC abricomunicacion()
        SocketCreate my_socket; !crea el socket
        SocketConnect my_socket, "192.168.50.200", 4012;
    ENDPROC
    
    PROC leer()
        ! ClearRawBytes receive_string;
        WaitTime 1;
        SocketSend my_socket,\Str:="l";
        !escribe en la red y lo envia a arduino (donde será leido)
        WaitTime 0.1;
        !espera un tiempo
        SocketReceive my_socket\RawData:=receive_string,\Time:=WAIT_MAX;
        WaitTime 0.01;
        !espera un tiempo
        UnpackRawBytes receive_string,1,ack\ASCII:=8;
        !8 es el espacio en caracteres que forman el número
        UnpackRawBytes receive_string,9,posx\ASCII:=8;
        UnpackRawBytes receive_string,17,posy\ASCII:=8;
        !UnpackRawBytes receive_string, 1, posy \ASCII:=24;
        !ok:=StrToVal(ack,float);
        okposx:=StrToVal(posx,posxint);
        okposy:=StrToVal(posy,posyint);
        okack:=StrToVal(ack,estad);
        ClearRawBytes receive_string;
        !estado;
 ENDPROC

ENDMODULE